var documenterSearchIndex = {"docs":
[{"location":"functionalities/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"functionalities/#Installation-Instructions","page":"Overview","title":"Installation Instructions","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"You can install the latest version of MITgcm.jl using the built-in package manager. ","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"using Pkg\nPkg.add(\"MITgcm\")","category":"page"},{"location":"functionalities/#Main-Functionalities","page":"Overview","title":"Main Functionalities","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"MITgcm.jl provides a suite of tools for analyzing MITgcm results, compiling the model, modifying its inputs, running simulations, and more – all from within julia. Functionalities are also documented via the Examples section.","category":"page"},{"location":"functionalities/#MITgcm-File-Formats","page":"Overview","title":"MITgcm File Formats","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"A common use case for MITgcm.jl is to use and analyze model output from a previous MITgcm run. As an example, the notebook from JuliaCon2021 (MITgcm_tutorial_global_oce_biogeo.jl) reads and visualize results from the standard MITgcm configuration called tutorial_global_oce_biogeo.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"note: Note\nThis notebook builds and runs tutorial_global_oce_biogeo from within Julia. Alternatively, the MITgcm documentation explains how to build and run tutorials at the command line in linux. ","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"scan_rundir / scan_stdout provides a summary information about what's in the model run/ folder. With this information, we are ready to read model output. The various files that MITgcm can generate are covered below.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Standard Output (text)\nInput Files (text)\nMDS Files (binary output)\nMNC Files (netcdf output)\nGrid Files (binary or netcdf)\nOther Files","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Grid variables are often needed for analysis. The grid output can be read from file using either GridLoad_mdsio or GridLoad_mnc. This will return Γ.XC, Γ.YC, etc formated using MeshArrays.jl. See also GridLoad_native.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"note: Note\nMITgcm_scan_output.jl does this in bulk for all configurations in MITgcm/verification and further displays each grid (this page).","category":"page"},{"location":"functionalities/#Model-Configurations","page":"Overview","title":"Model Configurations","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"The verification_experiments function lists standard model configurations found in the joinpath(MITgcm_path[1],\"verification\") folder. ","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Each model configuration has a subfolder where MITgcm can be compiled and run. ","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"In MITgcm.jl, a model configuration is represented as a MITgcm_config. This data structure allows you take advantage of the ClimateModels.jl interface for example.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"The setup function can thus be used to prepare a temporary run directory for the MITgcm_config; then build to compile the model, and MITgcm_launch to run it.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"note: Note\nFor more on these aspects, see Examples, More On Configurations, and ClimateModels Interface.","category":"page"},{"location":"functionalities/#More-Functionalities","page":"Overview","title":"More Functionalities","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"Interactive notebooks can be found in the Examples section (and the examples/ subfolder). They demonstrate functionalities like plotting with Makie.jl and particle tracking with  IndividualDisplacements.jl.","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"And more documentation is also found here:","category":"page"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"API Reference\nFormat Conversions\nFormulae etc","category":"page"},{"location":"functionalities/#API-Reference","page":"Overview","title":"API Reference","text":"","category":"section"},{"location":"functionalities/","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"functionalities_more/#More-Functionalities","page":"More Functionalities","title":"More Functionalities","text":"","category":"section"},{"location":"functionalities_more/#Format-Conversions","page":"More Functionalities","title":"Format Conversions","text":"","category":"section"},{"location":"functionalities_more/","page":"More Functionalities","title":"More Functionalities","text":"findtiles\ncube2compact\ncompact2cube\nconvert2array\nconvert2gcmfaces","category":"page"},{"location":"functionalities_more/#MITgcm.findtiles","page":"More Functionalities","title":"MITgcm.findtiles","text":"findtiles(ni::Int,nj::Int,mygrid::gcmgrid)\nfindtiles(ni::Int,nj::Int,grid::String=\"LatLonCap\",GridParentDir=\"../inputs/GRID_LLC90/\")\n\nReturn a MeshArray map of tile indices, mytiles[\"tileNo\"], for tile size ni,nj and extract grid variables accordingly.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_more/#MITgcm.cube2compact","page":"More Functionalities","title":"MITgcm.cube2compact","text":"cube2compact(x::Array)\n\nReshape from e.g. size (192, 32, 5) in cube format to (32, 192, 5) in compact format.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_more/#MITgcm.compact2cube","page":"More Functionalities","title":"MITgcm.compact2cube","text":"compact2cube(x::Array)\n\nReshape from e.g. size (32, 192, 5) in cube format to (192, 32, 5) in compact format.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_more/#MITgcm.convert2array","page":"More Functionalities","title":"MITgcm.convert2array","text":"convert2array(fld::MeshArray)\n\nConvert MeshArray to Array (or vice versa otherwise)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_more/#MITgcm.convert2gcmfaces","page":"More Functionalities","title":"MITgcm.convert2gcmfaces","text":"convert2gcmfaces(fld::MeshArray)\n\nConvert mitgcm output to MeshArray (or vice versa otherwise)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_more/#Formulae-etc","page":"More Functionalities","title":"Formulae etc","text":"","category":"section"},{"location":"functionalities_more/","page":"More Functionalities","title":"More Functionalities","text":"SeaWaterDensity\nMixedLayerDepth","category":"page"},{"location":"functionalities_more/#MITgcm.SeaWaterDensity","page":"More Functionalities","title":"MITgcm.SeaWaterDensity","text":"SeaWaterDensity(Θ,Σ,Π,Π0)\n\nCompute potential density (ρP), in situ density (ρI), and density referenced to PREF (Π0 in decibars) from potential temperature (Θ in °C), salinity (Σ in psu) and pressure (Π in decibars) according to the UNESCO / Jackett & McDougall 1994 equation of state.\n\nCredits: code based on a Matlab implementation by B. Ferron Reference: https://www.jodc.go.jp/info/iocdoc/UNESCOtech/059832eb.pdf Check value: ρI = 1041.83267kg/m^3 for Θ=3°Celcius, Σ=35psu, Π=3000dbar\n\n(ρP,ρI,ρR) = SeaWaterDensity(3.,35.5,3000.)\nisapprox(ρI,1041.83267, rtol=1e-6)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_more/#MITgcm.MixedLayerDepth","page":"More Functionalities","title":"MITgcm.MixedLayerDepth","text":"MixedLayerDepth(Θ,Σ,Δ,mthd)\n\nCompute mixed layer depth from potential temperature (Θ in °C), salinity (Σ in psu) and depth (Δ in method) according to various formulas (mthd == \"BM\", \"Suga\", \"Kara\"). Inputs must be dense vectors without any missing value (or NaN, etc).\n\nD=collect(0.0:1.0:500.0); tmp=(1.0.-tanh.(5*(-1 .+ 2/D[end]*D)));\nT=2.0 .+ 8.0*tmp; S=34.0 .+ 0.5*tmp;\n(ρP,ρI,ρR) = SeaWaterDensity(T,S,D);\n\nmld=MixedLayerDepth(T,S,D,\"BM\"); isapprox(mld,134.0)\n\nusing Plots\nplot(ρP,-D,w=2,label=\"Potential Density\",ylabel=\"Depth\")\nplot!(vec([ρP[1] ρP[end]]),-fill(mld,2),label=\"Mixed Layer Depth\",w=2,c=\"black\",s=:dash)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm-File-Formats","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"The two main output formats of MITgcm gridded fields are called MDS and MNC. In addition, the standard output is a text file that records events during the model run, including its successful completion.","category":"page"},{"location":"functionalities_read/#Standard-Output","page":"MITgcm File Formats","title":"Standard Output","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"scan_rundir\nscan_stdout\nread_available_diagnostics","category":"page"},{"location":"functionalities_read/#MITgcm.scan_rundir","page":"MITgcm File Formats","title":"MITgcm.scan_rundir","text":"scan_rundir(pth::String)\n\nScan a MITgcm run directory and then, if found, the standard output text file (\"output.txt\" or \"STDOUT.0000\") via scan_stdout.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.scan_stdout","page":"MITgcm File Formats","title":"MITgcm.scan_stdout","text":"scan_stdout(filout::String)\n\nScan a MITgcm standard output text file (\"output.txt\" or \"STDOUT.0000\") and return a NamedTuple of information collected.\n\npackages : report of packages being compiled and used\nparams_time : initial time, model duation, output frequency, etc\nparams_grid : type of grid (Curvilinear, Cartesian, ...) and array sizes\nparamsfiles : type of output (usemdsio, use_mnc) and array size (ioSize)\ncompleted : true / false depending on the end of standard output file (filout)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.read_available_diagnostics","page":"MITgcm File Formats","title":"MITgcm.read_available_diagnostics","text":"read_available_diagnostics(fldname::String; filename=\"available_diagnostics.log\")\n\nGet the information for a particular variable fldname from the available_diagnostics.log text file generated by MITgcm.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MDS-Files","page":"MITgcm File Formats","title":"MDS Files","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"read_mdsio\nread_meta","category":"page"},{"location":"functionalities_read/#MITgcm.read_mdsio","page":"MITgcm File Formats","title":"MITgcm.read_mdsio","text":"read_mdsio(fil::String)\n\nRead a single MITgcm MDSIO-type file (\".data\" binary + \".meta\" text pair), and return as an Array\n\np=\"./hs94.cs-32x32x5/run/\"\nx=read_mdsio(p*\"surfDiag.0000000020.002.001.data\")\ny=read_mdsio(p*\"pickup.ckptA.002.001.data\")\nz=read_mdsio(p*\"T.0000000000.002.001.data\")\n\n\n\n\n\nread_mdsio(fil::String,rec::Integer)\n\nRead a single variable / record from a single MITgcm MDSIO-type file, and return as an Array.\n\nread_mdsio(fil,1)\n\n\n\n\n\nread_mdsio(fil::String,nam::Symbol)\n\nRead a single variable / record from a single MITgcm MDSIO-type file, and return as an Array.\n\nread_mdsio(fil,:THETA)\n\n\n\n\n\nread_mdsio(pth::String,fil::String)\n\nRead a set of MITgcm MDSIO-type files (\".data\" binary + \".meta\" text pair), combine, and return as an Array. Unlike read_mdsio(fil::String) where fil is one complete file name, this method will search within pth for files that start with fil.\n\np=\"./hs94.cs-32x32x5/run/\"\nx=read_mdsio(p,\"surfDiag.0000000020\")\ny=read_mdsio(p,\"pickup.ckptA\")\nz=read_mdsio(p,\"T.0000000000\")\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.read_meta","page":"MITgcm File Formats","title":"MITgcm.read_meta","text":"read_meta(metafile)\n\nRead a MITgcm metadata file, parse it, and return as a NamedTuple\n\np=\"./hs94.cs-32x32x5/run/\"\nmeta=read_meta(p*\"surfDiag.0000000020.002.001.meta\")\npairs(meta)\nmeta.dimList\n\n\n\n\n\nread_meta(pth::String,fil::String)\n\nRead a MITgcm metadata files, parse them, and return as an array of NamedTuple\n\np=\"./hs94.cs-32x32x5/run/\"\nmeta=read_meta(p,\"surfDiag.0000000020\")\npairs(meta[end])\n[meta[i].dimList for i in 1:length(meta)]\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MNC-Files","page":"MITgcm File Formats","title":"MNC Files","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"read_mnc","category":"page"},{"location":"functionalities_read/#MITgcm.read_mnc","page":"MITgcm File Formats","title":"MITgcm.read_mnc","text":"read_mnc(pth::String,fil::String,var::String)\n\nRead variable var from a set of MITgcm MNC-type files (netcdf files), combine, and return as an Array. This method will search within pth for files that start with fil.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#Grid-Files","page":"MITgcm File Formats","title":"Grid Files","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"GridLoad_mdsio\nGridLoad_mnc\nGridLoad_native","category":"page"},{"location":"functionalities_read/#MITgcm.GridLoad_mdsio","page":"MITgcm File Formats","title":"MITgcm.GridLoad_mdsio","text":"GridLoad_mdsio(myexp::MITgcm_config)\n\nLoad grid variables (XC, YC, Depth, etc) from model run directory (rundir).\n\n\n\n\n\nGridLoad_mdsio(rundir::String)\n\nLoad grid variables (XC, YC, Depth, etc) from model run directory (rundir).\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.GridLoad_mnc","page":"MITgcm File Formats","title":"MITgcm.GridLoad_mnc","text":"GridLoad_mnc(γ::gcmgrid)\n\nLoad grid variabes (XC, YC, Depth) model run directory (joinpath(rundir,\"mnc_test_0001\")).\n\n\n\n\n\nGridLoad_mnc(myexp::MITgcm_config)\n\nLoad grid variables (XC, YC, Depth) from model run directory (joinpath(rundir,\"mnc_test_0001\")).\n\n\n\n\n\nGridLoad_mnc(rundir::String)\n\nLoad grid variables (XC, YC, Depth) from model run directory (joinpath(rundir,\"mnc_test_0001\")).\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.ReadNativeGridFiles.GridLoad_native","page":"MITgcm File Formats","title":"MITgcm.ReadNativeGridFiles.GridLoad_native","text":"GridLoad_native(path,files,γ)\n\nLoad grid variables from native grid files.\n\npath=\"GRID_LLC90\"\nfiles=[\"tile001.mitgrid\",\"tile002.mitgrid\",\"tile003.mitgrid\",\"tile004.mitgrid\",\"tile005.mitgrid\"]\nioSize=[90 1170]\nfacesSize=[(90, 270), (90, 270), (90, 90), (270, 90), (270, 90)]\n\nγ=gcmgrid(path,\"LatLonCap\",5,facesSize, ioSize, Float64, read, write)\n\nΓ=GridLoad_native(path,files,γ)\n\nor using another grid\n\npath=\"llc_1080\"\nfiles=[ \"llc_001_1080_3240.bin\",\"llc_002_1080_3240.bin\",\n        \"llc_003_1080_1080.bin\",\"llc_004_3240_1080.bin\",\"llc_005_3240_1080.bin\"]\nioSize=[1080 14040]\nfacesSize=[(1080, 3240), (1080, 3240), (1080, 1080), (3240, 1080), (3240, 1080)]\n\nand for plotting \n\nusing GLMakie\n\n#col=log10.(Γ.RAC); rng=(4,8)\n\n#using MAT\n#Depth=get_bathy(path,γ)\n#col=write(Depth); rng=(-5000,5000)\n\nXC=write(Γ.XC); YC=write(Γ.YC)\nii=findall((XC.>-80).&(XC.<-10).&(YC.>-10).&(YC.<60))\n#ii=findall((XC.>-80).&(XC.<-60).&(YC.>15).&(YC.<35))\n\n#ii=1:prod(γ.ioSize)\n\nscatter(XC[ii],YC[ii],color=col[ii],colorrange=rng,markersize=0.1, markerspace = :data)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#Input-Files","page":"MITgcm File Formats","title":"Input Files","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"MITgcm_namelist\nread_namelist\nwrite_namelist","category":"page"},{"location":"functionalities_read/#MITgcm.MITgcm_namelist","page":"MITgcm File Formats","title":"MITgcm.MITgcm_namelist","text":"MITgcm_namelist(groups,params)\n\nData structure representing a MITgcm namelist file, such as data.pkg, which contains \n\n    groups :: Array{Symbol,1} = Array{Symbol,1}(undef, 0)\n    params :: Array{OrderedDict{Symbol,Any},1} = Array{OrderedDict{Symbol,Any},1}(undef, 0)\n\nwith model parameters (params) being organized in groups as done in the files.\n\nusing MITgcm\nfil=joinpath(MITgcm_path[1],\"verification\",\"advect_xy\",\"run\",\"data\")\nnml=read_namelist(fil)\nMITgcm_namelist(nml.groups,nml.params)\nMITgcm_namelist(groups=nml.groups,params=nml.params)\nMITgcm_namelist(groups=nml.groups)\n\n\n\n\n\n","category":"type"},{"location":"functionalities_read/#MITgcm.read_namelist","page":"MITgcm File Formats","title":"MITgcm.read_namelist","text":"read_namelist(fil)\n\nRead a MITgcm namelist file, parse it, and return as a NamedTuple\n\nusing MITgcm\ntestreport(\"advect_xy\")\nfil=joinpath(MITgcm_path[1],\"verification\",\"advect_xy\",\"run\",\"data\")\nnamelist=read_namelist(fil)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.write_namelist","page":"MITgcm File Formats","title":"MITgcm.write_namelist","text":"write_namelist(fil)\n\nSave a MITgcm namelist file. In the example below, one is read from file, modified, and then saved to a new file using write_namelist.\n\nusing MITgcm\nfil=joinpath(MITgcm_path[1],\"verification\",\"advect_xy\",\"run\",\"data\")\nnml=read_namelist(fil)\nwrite_namelist(fil*\"_new\",namelist)\n\nor\n\nnml=read(fil,MITgcm_namelist())\nwrite(fil*\"_new\",nml)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#Other-Files","page":"MITgcm File Formats","title":"Other Files","text":"","category":"section"},{"location":"functionalities_read/","page":"MITgcm File Formats","title":"MITgcm File Formats","text":"read_flt\nread_bin\nread_nctiles","category":"page"},{"location":"functionalities_read/#MITgcm.read_flt","page":"MITgcm File Formats","title":"MITgcm.read_flt","text":"read_flt(dirIn::String,prec::DataType)\n\nRead displacements from MITgcm/pkg/flt output file into a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.read_bin","page":"MITgcm File Formats","title":"MITgcm.read_bin","text":"read_bin(fil::String,kt::Union{Int,Missing},kk::Union{Int,Missing},prec::DataType,mygrid::gcmgrid)\n\nRead model output from binary file and convert to MeshArray. Other methods:\n\nread_bin(fil::String,prec::DataType,mygrid::gcmgrid)\nread_bin(fil::String,mygrid::gcmgrid)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_read/#MITgcm.read_nctiles","page":"MITgcm File Formats","title":"MITgcm.read_nctiles","text":"read_nctiles(fileName,fldName,mygrid; I, eccoVersion4Release4=false, verbose=false)\n\nRead model output from NCTiles file and convert to MeshArray instance. Setting the keyword argument eccoVersion4Release4=true allows read_nctiles to read in ECCOv4r4 data which has a different file naming convention to previous versions.\n\nmygrid=GridSpec(\"LatLonCap\")\nfileName=\"nctiles_grid/GRID\"\nDepth=read_nctiles(fileName,\"Depth\",mygrid)\nhFacC=read_nctiles(fileName,\"hFacC\",mygrid)\nhFacC=read_nctiles(fileName,\"hFacC\",mygrid,I=(:,:,1))\n\n\n\n\n\n","category":"function"},{"location":"functionalities_configurations/#Model-Configurations","page":"Model Configurations","title":"Model Configurations","text":"","category":"section"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"Get the default version of MITgcm source code, and locate the local copy:","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"using MITgcm\nMITgcm_download()\nMITgcm_path[1]","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"Get the lsit of standard model configurations in verification/ : ","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"verification_experiments()","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"Choose one : ","category":"page"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"MITgcm_config(configuration=\"MLAdjust\")","category":"page"},{"location":"functionalities_configurations/#Functionalities","page":"Model Configurations","title":"Functionalities","text":"","category":"section"},{"location":"functionalities_configurations/","page":"Model Configurations","title":"Model Configurations","text":"MITgcm_download\nMITgcm_path\nverification_experiments\nMITgcm_config","category":"page"},{"location":"functionalities_configurations/#MITgcm.MITgcm_download","page":"Model Configurations","title":"MITgcm.MITgcm_download","text":"MITgcm_download()\n\nDownload default, compact version of MITgcm from zenodo.\n\n\n\n\n\n","category":"function"},{"location":"functionalities_configurations/#MITgcm.MITgcm_path","page":"Model Configurations","title":"MITgcm.MITgcm_path","text":"MITgcm_path\n\nPath to a MITgcm folder. MITgcm_path[1] should generally be used. MITgcm_path[2] is mostly meant to facilitate comparisons between e.g. MITgcm releases when needed.\n\n\n\n\n\n","category":"constant"},{"location":"functionalities_configurations/#MITgcm.verification_experiments","page":"Model Configurations","title":"MITgcm.verification_experiments","text":"verification_experiments()\n\nGet list of all most-standard configurations of MITgcm and return as an Array of MITgcm_config\n\nexps=verification_experiments()\n\n\n\n\n\n","category":"function"},{"location":"functionalities_configurations/#MITgcm.MITgcm_config","page":"Model Configurations","title":"MITgcm.MITgcm_config","text":"MITgcm_config()\n\nConcrete type of AbstractModelConfig for MITgcm (as part of the ClimateModels.jl interface for MITgcm) which contains\n\n    model :: String = \"MITgcm\"\n    configuration :: String = \"\"\n    options :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    inputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    outputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    status :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    channel :: Channel{Any} = Channel{Any}(10) \n    folder :: String = tempdir()\n    ID :: UUID = UUIDs.uuid4()\n\nand can be constructed using keywords as follows\n\nunknown_config=MITgcm_config(configuration=\"unknown\")\n\n\n\n\n\n","category":"type"},{"location":"functionalities_interface/#ClimateModels-Interface","page":"ClimateModels Interface","title":"ClimateModels Interface","text":"","category":"section"},{"location":"functionalities_interface/","page":"ClimateModels Interface","title":"ClimateModels Interface","text":"The ClimateModels.jl's interface is implemented in this pacakge. This allows you to easily create model simulations using MITgcm conveniently from Julia.","category":"page"},{"location":"functionalities_interface/","page":"ClimateModels Interface","title":"ClimateModels Interface","text":"using MITgcm\nMC=MITgcm_config(configuration=\"advect_xy\")\nsetup(MC)\nbuild(MC,\"--allow-skip\")\nMITgcm_launch(MC)","category":"page"},{"location":"functionalities_interface/#Functionalities","page":"ClimateModels Interface","title":"Functionalities","text":"","category":"section"},{"location":"functionalities_interface/","page":"ClimateModels Interface","title":"ClimateModels Interface","text":"setup\nbuild\ncompile\nMITgcm_launch\nclean","category":"page"},{"location":"functionalities_interface/#ClimateModels.setup","page":"ClimateModels Interface","title":"ClimateModels.setup","text":"setup(config::MITgcm_config)\n\nCreate a run/ folder and link everything there as needed to be ready to run model as  normally done for most-standard MITgcm configurations (incl. prepare_run and mitgcmuv). Call ClimateModels.git_log_init(config) to setup git tracker and  put!(config.channel,MITgcm_launch) to be executed via launch(config) later.\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#ClimateModels.build","page":"ClimateModels Interface","title":"ClimateModels.build","text":"build(config::MITgcm_config)\n\nBuild the model using genmake2, make depend, and make. The first two link all  code files, headers, etc  in the build/ folder before compiling the model\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\nbuild(config::MITgcm_config,options::String)\n\nBuild the model using genmake2, make depend, and make unless otherwise specified via options. The genmake2 and make depend commands link all  code files, headers, etc  in the build/ folder before make compiles the model.\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#ClimateModels.compile","page":"ClimateModels Interface","title":"ClimateModels.compile","text":"compile(config::MITgcm_config)\n\nCompile the model using make in build/ that has already been setup.\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#MITgcm.MITgcm_launch","page":"ClimateModels Interface","title":"MITgcm.MITgcm_launch","text":"MITgcm_launch(config::MITgcm_config)\n\nGo to run/ folder and effectively call mitgcmuv > output.txt\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"functionalities_interface/#ClimateModels.clean","page":"ClimateModels Interface","title":"ClimateModels.clean","text":"clean(config::MITgcm_config)\n\nCancel any remaining task (config.channel) and clean up the run directory (via rm).\n\n(part of the climate model interface as specialized for MITgcm)\n\n\n\n\n\n","category":"function"},{"location":"contributing/#Contributors-Guide","page":"Contribute","title":"Contributors Guide","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Thank you for considering contributing to MITgcm.jl! If you're interested in contributing we want your help no matter how big or small a contribution you make! ","category":"page"},{"location":"contributing/#Table-of-Contents","page":"Contribute","title":"Table of Contents","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"How to Contribute\nReporting Bugs\nSuggesting Enhancements\nCode Contribution\nPull Request Process\nLicense","category":"page"},{"location":"contributing/#How-to-Contribute","page":"Contribute","title":"How to Contribute","text":"","category":"section"},{"location":"contributing/#Reporting-Bugs","page":"Contribute","title":"Reporting Bugs","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"If you encounter a bug, please help us fix it by following these steps:","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Ensure the bug is not already reported by checking the issue tracker.\nIf the bug isn't reported, open a new issue. Clearly describe the issue, including steps to reproduce it.","category":"page"},{"location":"contributing/#Suggesting-Enhancements","page":"Contribute","title":"Suggesting Enhancements","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"If you have ideas for enhancements, new features, or improvements, we'd love to hear them! Follow these steps:","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Check the issue tracker to see if your suggestion has been discussed.\nIf not, open a new issue, providing a detailed description of your suggestion and the use case it addresses.","category":"page"},{"location":"contributing/#Code-Contribution","page":"Contribute","title":"Code Contribution","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"If you'd like to contribute code to the project:","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Fork the repository.\nClone your fork: git clone https://github.com/gaelforget/MITgcm.jl\nCreate a new branch for your changes: git checkout -b feature-branch\nMake your changes and commit them with a clear message.\nPush your changes to your fork: git push origin feature-branch\nOpen a pull request against the master branch of the main repository.","category":"page"},{"location":"contributing/#Pull-Request-Process","page":"Contribute","title":"Pull Request Process","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Please ensure your pull request follows these guidelines:","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Adheres to the coding standards.\nIncludes relevant tests for new functionality.\nHas a clear commit history and messages.\nReferences the relevant issue if applicable.","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"Please don't hesistate to get in touch to discuss, or with any questions!","category":"page"},{"location":"contributing/#License","page":"Contribute","title":"License","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"By contributing to this project, you agree that your contributions will be licensed under the LICENSE file of this repository.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MITgcm","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"note: Note\nCompiling MITgcm requires a fortran compiler. This is a requirement for all notebooks except MITgcm_configurations.jl.","category":"page"},{"location":"examples/#Standard-Workflow","page":"Examples","title":"Standard Workflow","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here is the standard way to run a model configuration using MITgcm.jl.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MITgcm\nMITgcm_download()\nMC=MITgcm_config(configuration=\"advect_xy\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"setup(MC)\nbuild(MC,\"--allow-skip\")\nlog(MC)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"MITgcm_launch(MC)\nreaddir(MC,\"run\")","category":"page"},{"location":"examples/#Notebook-Examples","page":"Examples","title":"Notebook Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Below are links to static html versions of the examples which one can open with a web browser.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"If instead you wanted to run the notebooks using Pluto.jl, then you might proceed as follows:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"open julia in terminal window\ntype the commands shown below at the Julia prompt\nin web-browser, open one of the notebooks' code link using the Pluto interface.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Pluto\nPluto.run(notebook=\"examples/MITgcm_configurations.jl\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Alternatively, you can run an example at the command line as, e.g., ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia -e 'using Pluto\nnotebook=\"examples/MITgcm_configurations.jl\"\nPluto.activate_notebook_environment(notebook)\nusing Pkg; Pkg.instantiate()\ninclude(notebook)\n'","category":"page"},{"location":"examples/#Notebooks-Listing","page":"Examples","title":"Notebooks Listing","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"MITgcm_configurations.jl (code link); explore MITgcm configurations and their parameters.\nMITgcm_scan_output.jl (code link) : scan run directory, standard output, read grid files, and vizualize. \nMITgcm_run.jl (code link) : a detailed look into compiling and running the model.\nMITgcm_worklow.jl (code link): build, setup, run, and plot for a chosen standard MITgcm configuration.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"note: Note\nThe HS94* series of examples need to be run in sequence, as they rely on output from one another. This tutorial runs the Held and Suarez 94 benchmark\t with MITgcm on a cube sphere grid, and illustrates particle tracking in the Atmosphere using\tMeshArrays.jl and IndividualDisplacements.jl.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"HS94_animation.jl (code link) : run hs94.cs-32x32x5 configuration, read output, interpolate, and plot maps.\nHS94_particles.jl (code link) : compute particle trajectories from hs94.cs-32x32x5 output generated earlier.\nHS94_Makie.jl (code link) : using Makie.jl instead of Plots.jl","category":"page"},{"location":"#MITgcm.jl","page":"Home","title":"MITgcm.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia interface to MITgcm which allows user to not only read and analyze model output, but also download the source code, build the model executable, set run-time parameters, run simulations, verify model results, and perform other tasks related to MITgcm. These functionalities are documented via the Examples section.","category":"page"},{"location":"#main-contents","page":"Home","title":"Table Of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"functionalities.md\",\n    \"functionalities_read.md\",\n    \"functionalities_configurations.md\",\n    \"functionalities_interface.md\",\n    \"functionalities_more.md\",\n    \"examples.md\",\n    \"contributing.md\",\n]\nDepth = 2","category":"page"},{"location":"#Main-Features","page":"Home","title":"Main Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Read / Write / Scan the various MITgcm File types\nStandard Modeling Worflow (Climate Model Interface)\nStandard MITgcm configurations (verification)\nExamples (notebooks in examples/)","category":"page"},{"location":"#Related-packages","page":"Home","title":"Related packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ClimateModels.jl provides a standard interface for such workflows. \nOceanStateEstimation.jl for accessing and using ECCO solutions. \nMeshArrays.jl defining in-memory containters for gridded model output.\nIndividualDisplacements.jl enabling particle tracking applications. ","category":"page"},{"location":"#Visuals","page":"Home","title":"Visuals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Simulated particles from HS94 on cube sphere grid)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: The impossible MITgcm rendering)","category":"page"}]
}
